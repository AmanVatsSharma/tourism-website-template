---
/**
 * Header Component - REFACTORED WITH AUTOMATIC LANGUAGE DETECTION! üïâÔ∏è
 * 
 * Beautiful spiritual design with dynamic language support.
 * 
 * FEATURES:
 * - Gradient background with Om symbol
 * - Smooth animations
 * - Automatic language detection from URL
 * - Dynamic navigation links (correct prefix for each language)
 * - Language toggle that works from any page
 * - Mobile-responsive hamburger menu
 * - Sticky header with blur effect on scroll
 * - Spiritual design elements
 * 
 * ARCHITECTURE:
 * - Receives currentLocale from BaseLayout
 * - Generates navigation links with proper language prefix
 * - Language toggle adds/removes /hi/ prefix
 * - Active link detection works for both languages
 * 
 * @component Header
 */

import { useTranslation } from '../../utils/translations';
import { getNavigationLinks, getLocalizedPath } from '../../utils/languageHelper';

interface Props {
  currentLocale: 'en' | 'hi';
}

const { currentLocale } = Astro.props;

// Get translation function for current locale
const t = useTranslation(currentLocale);

// Get current path for active link detection
const currentPath = Astro.url.pathname;

console.log('[Header] ========================================');
console.log('[Header] Rendering header');
console.log('[Header] Current locale:', currentLocale);
console.log('[Header] Current path:', currentPath);

// Generate navigation links with correct language prefix
const navLinks = getNavigationLinks(currentLocale);

console.log('[Header] Navigation links:', navLinks);

// Build navigation items with localized URLs and translated labels
const navItems = [
  { href: navLinks.home, label: t('nav.home'), icon: 'üè†' },
  { href: navLinks.packages, label: t('nav.packages'), icon: 'üì¶' },
  { href: navLinks.about, label: t('nav.about'), icon: '‚ÑπÔ∏è' },
  { href: navLinks.permits, label: t('nav.permits'), icon: 'üìã' },
  { href: navLinks.howToReach, label: t('nav.howToReach', 'How to Reach'), icon: 'üó∫Ô∏è' },
  { href: navLinks.preparation, label: t('nav.preparation'), icon: 'üéí' },
  { href: navLinks.gallery, label: t('nav.gallery'), icon: 'üì∏' },
  { href: navLinks.blog, label: t('nav.blog'), icon: 'üìö' },
  { href: navLinks.faq, label: t('nav.faq'), icon: '‚ùì' },
  { href: navLinks.contact, label: t('nav.contact'), icon: 'üìû' },
];

// Primary vs extra items for desktop to prevent wrapping
const navPrimary = navItems.slice(0, 6);
const navExtra = navItems.slice(6);

// Language toggle configuration
const toggleLang = currentLocale === 'en' ? 'hi' : 'en';

// Generate alternate language path
// Remove /hi prefix for English, add /hi prefix for Hindi
let togglePath: string;
if (currentLocale === 'en') {
  // Switch to Hindi: add /hi prefix
  togglePath = currentPath === '/' ? '/hi' : `/hi${currentPath}`;
} else {
  // Switch to English: remove /hi prefix
  const basePath = currentPath.replace(/^\/hi/, '') || '/';
  togglePath = basePath;
}

console.log('[Header] Language toggle:', currentLocale, '‚Üí', toggleLang);
console.log('[Header] Toggle path:', currentPath, '‚Üí', togglePath);
console.log('[Header] ========================================');
---

<header class="header-wrapper sticky top-0 z-[100] transition-all duration-300" id="main-header">
  <!-- Main Header Bar -->
  <div class="bg-gradient-to-r from-primary-600 via-accent-500 to-primary-600 text-white shadow-xl border-b-4 border-accent-400">
    <div class="container-custom">
      <div class="flex items-center justify-between py-4">
        <!-- Logo Section with Spiritual Elements -->
        <a href={navLinks.home} class="flex items-center gap-3 group">
          <!-- Om Symbol -->
          <div class="text-4xl md:text-5xl group-hover:scale-110 transition-transform duration-300 drop-shadow-lg">
            üïâÔ∏è
          </div>
          
          <!-- Company Name -->
          <div class="flex flex-col">
            <span class="text-xl md:text-2xl font-bold tracking-wide text-white">
              {t('header.companyName', 'Shiv Yatra Tourism')}
            </span>
            <span class="text-xs md:text-sm opacity-90 font-medium">
              {t('header.tagline', 'Sacred Himalayan Pilgrimages')}
            </span>
          </div>
        </a>

        <!-- Desktop Navigation -->
        <nav class="hidden lg:flex items-center gap-1">
          {navPrimary.map((item) => {
            // Check if this link is active
            const isActive = currentPath === item.href || 
              (item.href !== '/' && item.href !== '/hi' && currentPath.startsWith(item.href));
            
            return (
              <a
                href={item.href}
                class={`nav-link px-4 py-2 rounded-full font-medium text-white transition-all duration-300 hover:bg-white/20 hover:shadow-lg ${
                  isActive ? 'bg-white/30 shadow-md' : ''
                }`}
              >
                <span class="mr-1">{item.icon}</span>
                {item.label}
              </a>
            );
          })}

          {navExtra.length > 0 && (
            <div class="relative group">
              <button
                class="px-4 py-2 rounded-full font-medium text-white transition-all duration-300 hover:bg-white/20 hover:shadow-lg flex items-center gap-1"
                type="button"
                aria-haspopup="true"
                aria-expanded="false"
              >
                <span>More</span>
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                </svg>
              </button>
              <div class="invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-200 absolute right-0 mt-2 min-w-[220px] bg-white text-gray-800 rounded-xl shadow-2xl border border-gray-200 overflow-hidden z-[120]">
                {navExtra.map((item) => {
                  const isActive = currentPath === item.href || 
                    (item.href !== '/' && item.href !== '/hi' && currentPath.startsWith(item.href));
                  return (
                    <a
                      href={item.href}
                      class={`block px-4 py-3 text-sm font-semibold hover:bg-gray-50 ${isActive ? 'bg-gray-100 text-primary-700' : ''}`}
                    >
                      <span class="mr-2">{item.icon}</span>
                      {item.label}
                    </a>
                  );
                })}
              </div>
            </div>
          )}
        </nav>

        <!-- Language Toggle & Mobile Menu Button -->
        <div class="flex items-center gap-3">
          <!-- Language Toggle -->
          <a
            href={togglePath}
            class="language-toggle hidden sm:flex items-center gap-2 px-4 py-2 bg-white/20 backdrop-blur-sm hover:bg-white/30 rounded-full font-semibold transition-all duration-300 hover:scale-105 shadow-md text-white"
            aria-label={`Switch to ${toggleLang === 'hi' ? 'Hindi' : 'English'}`}
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 11.236 11.618 14z"/>
            </svg>
            {toggleLang === 'hi' ? '‡§π‡§ø‡§Ç‡§¶‡•Ä' : 'English'}
          </a>

          <!-- Mobile Menu Toggle Button -->
          <button
            id="mobile-menu-toggle"
            class="lg:hidden flex items-center justify-center w-10 h-10 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
            aria-label="Toggle menu"
            aria-expanded="false"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path class="menu-icon-open" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
              <path class="menu-icon-close hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile Menu Backdrop (Click to close) -->
  <div
    id="mobile-menu-backdrop"
    class="lg:hidden fixed inset-0 bg-black/50 z-[9998] opacity-0 pointer-events-none transition-opacity duration-300"
  ></div>

  <!-- Mobile Navigation Menu (Slide-in) - FIXED Z-INDEX -->
  <div
    id="mobile-menu"
    class="lg:hidden fixed inset-0 bg-gradient-to-br from-secondary-900 via-primary-800 to-accent-700 text-white z-[9999] transform translate-x-full transition-transform duration-300"
    style="top: 0; height: 100dvh;"
  >
    <!-- Close Button (Top Right) -->
    <button
      id="mobile-menu-close"
      class="absolute top-6 right-6 z-[10000] w-12 h-12 flex items-center justify-center rounded-full bg-white/20 hover:bg-white/30 transition-colors"
      aria-label="Close menu"
    >
      <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>

    <!-- Decorative Background -->
    <div class="absolute inset-0 opacity-10 pointer-events-none">
      <div class="absolute top-10 left-10 text-9xl">üïâÔ∏è</div>
      <div class="absolute bottom-10 right-10 text-9xl">üå∏</div>
      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-9xl">üèîÔ∏è</div>
    </div>

    <nav class="relative z-10 h-full overflow-y-auto py-20">
      <div class="container-custom">
        <!-- Mobile Nav Items -->
        <ul class="space-y-2">
          {navItems.map((item) => {
            // Check if this link is active
            const isActive = currentPath === item.href || 
              (item.href !== '/' && item.href !== '/hi' && currentPath.startsWith(item.href));
            
            return (
              <li>
                <a
                  href={item.href}
                  class={`mobile-nav-link flex items-center gap-3 px-6 py-4 rounded-xl font-semibold text-lg transition-all duration-300 hover:bg-white/20 hover:translate-x-2 ${
                    isActive ? 'bg-white/30 shadow-lg' : ''
                  }`}
                >
                  <span class="text-2xl">{item.icon}</span>
                  {item.label}
                </a>
              </li>
            );
          })}
        </ul>

        <!-- Mobile Language Toggle -->
        <div class="mt-8 px-6">
          <a
            href={togglePath}
            class="flex items-center justify-center gap-3 px-6 py-4 bg-white/20 backdrop-blur-sm hover:bg-white/30 rounded-xl font-semibold text-lg transition-all duration-300 text-white"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path d="M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 11.236 11.618 14z"/>
            </svg>
            {toggleLang === 'hi' ? 'Switch to Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä)' : 'Switch to English'}
          </a>
        </div>

        <!-- Contact Info in Mobile Menu -->
        <div class="mt-8 px-6 py-6 bg-white/10 backdrop-blur-sm rounded-xl">
          <h3 class="font-bold mb-3 text-lg">üìû Contact Us</h3>
          <a href="tel:+917302937532" class="block text-white hover:text-accent-200 transition-colors mb-2">
            +91-7302937532
          </a>
          <a href="https://wa.me/917302937532" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 px-4 py-2 bg-success hover:bg-green-600 rounded-full font-semibold transition-colors mt-2">
            üí¨ Chat on WhatsApp
          </a>
        </div>
      </div>
    </nav>
  </div>

  <!-- First-Visit Language Preference Dialog -->
  <div
    id="lang-pref-overlay"
    class="fixed inset-0 z-[10050] opacity-0 pointer-events-none transition-opacity duration-300"
    aria-hidden="true"
  >
    <div class="absolute inset-0 bg-black/60"></div>
    <div class="relative mx-auto mt-24 w-[90%] max-w-md rounded-2xl bg-gradient-to-br from-secondary-900 via-primary-800 to-accent-700 text-white shadow-2xl p-6">
      <button
        id="lang-pref-close"
        class="absolute top-3 right-3 w-10 h-10 flex items-center justify-center rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        aria-label="Close language selector"
      >
        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
      <div class="flex items-center gap-3 mb-4">
        <div class="text-3xl">üïâÔ∏è</div>
        <h3 class="text-xl font-bold">Choose your preferred language</h3>
      </div>
      <p class="text-white/90 mb-6">You can change it anytime from the sidebar language toggle.</p>
      <div class="grid grid-cols-2 gap-3">
        <a id="lang-choose-en" href="#" class="px-4 py-3 rounded-xl bg-white/20 hover:bg-white/30 text-center font-semibold transition-colors">English</a>
        <a id="lang-choose-hi" href="#" class="px-4 py-3 rounded-xl bg-white/20 hover:bg-white/30 text-center font-semibold transition-colors">‡§π‡§ø‡§Ç‡§¶‡•Ä</a>
      </div>
    </div>
  </div>
</header>

<style>
  /* Gradient Text for Logo */
  .gradient-text-light {
    background: linear-gradient(to right, #ffffff, #fef3c7, #ffffff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Nav Link Hover Effect */
  .nav-link {
    position: relative;
    overflow: hidden;
  }

  .nav-link::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: white;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
  }

  .nav-link:hover::before {
    transform: translateX(0);
  }

  /* Sticky Header Blur Effect */
  .header-wrapper.scrolled {
    backdrop-filter: blur(10px);
  }

  /* Hide-on-scroll behavior */
  .header-wrapper.header-hidden {
    transform: translateY(-100%);
  }

  /* Mobile Menu Animation */
  .mobile-nav-link:hover {
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
  }
  
  /* Hide WhatsApp button when mobile menu is open */
  body:has(#mobile-menu.translate-x-0) .whatsapp-float {
    opacity: 0;
    pointer-events: none;
  }
</style>

<script>
  // Mobile Menu Toggle
  document.addEventListener('DOMContentLoaded', () => {
    console.log('[Header] Initializing mobile menu...');
    
    const menuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop');
    const menuIconOpen = document.querySelector('.menu-icon-open');
    const menuIconClose = document.querySelector('.menu-icon-close');
    const headerEl = document.getElementById('main-header');
    const langOverlay = document.getElementById('lang-pref-overlay');
    const langClose = document.getElementById('lang-pref-close');
    const langEn = document.getElementById('lang-choose-en');
    const langHi = document.getElementById('lang-choose-hi');
    
    if (menuToggle && mobileMenu && menuIconOpen && menuIconClose) {
      let isMenuOpen = false;
      
      const openMenu = () => {
        isMenuOpen = true;
        mobileMenu.classList.remove('translate-x-full');
        mobileMenu.classList.add('translate-x-0');
        menuIconOpen.classList.add('hidden');
        menuIconClose.classList.remove('hidden');
      // Robust scroll lock to avoid page height jump on mobile
      const scrollY = window.scrollY || 0;
      document.body.dataset.scrollY = String(scrollY);
      document.body.style.position = 'fixed';
      document.body.style.top = `-${scrollY}px`;
      document.body.style.width = '100%';
      document.body.style.overflow = 'hidden';
        menuToggle.setAttribute('aria-expanded', 'true');
        
        // Show backdrop
        if (mobileMenuBackdrop) {
          mobileMenuBackdrop.classList.remove('opacity-0', 'pointer-events-none');
          mobileMenuBackdrop.classList.add('opacity-100', 'pointer-events-auto');
        }
        
        console.log('[Header] Mobile menu opened');
      };
      
      const closeMenu = () => {
        isMenuOpen = false;
        mobileMenu.classList.remove('translate-x-0');
        mobileMenu.classList.add('translate-x-full');
        menuIconOpen.classList.remove('hidden');
        menuIconClose.classList.add('hidden');
      // Restore scroll position and styles
      const scrollY = Number(document.body.dataset.scrollY || 0);
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      document.body.style.overflow = '';
      window.scrollTo(0, scrollY);
        menuToggle.setAttribute('aria-expanded', 'false');
        
        // Hide backdrop
        if (mobileMenuBackdrop) {
          mobileMenuBackdrop.classList.remove('opacity-100', 'pointer-events-auto');
          mobileMenuBackdrop.classList.add('opacity-0', 'pointer-events-none');
        }
        
        console.log('[Header] Mobile menu closed');
      };
      
      // Toggle button click
      menuToggle.addEventListener('click', () => {
        if (isMenuOpen) {
          closeMenu();
        } else {
          openMenu();
        }
      });
      
      // Close button click (inside mobile menu)
      if (mobileMenuClose) {
        mobileMenuClose.addEventListener('click', closeMenu);
      }
      
      // Close menu when clicking backdrop
      if (mobileMenuBackdrop) {
        mobileMenuBackdrop.addEventListener('click', closeMenu);
      }
      
      // Close menu when clicking on a link
      const mobileNavLinks = mobileMenu.querySelectorAll('.mobile-nav-link');
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', closeMenu);
      });
      
      // Close menu when pressing Escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isMenuOpen) {
          closeMenu();
        }
      });

      // Hide-on-scroll (mobile): hide header on scroll down, show on scroll up
      let lastY = window.scrollY || 0;
      let ticking = false;
      const handleScroll = () => {
        if (!headerEl) return;
        const y = window.scrollY || 0;
        const delta = y - lastY;
        // Only apply on mobile/tablet widths
        const isMobile = window.innerWidth < 1024;
        if (isMobile && !isMenuOpen) {
          if (delta > 8 && y > 50) {
            headerEl.classList.add('header-hidden');
          } else if (delta < -8 || y <= 50) {
            headerEl.classList.remove('header-hidden');
          }
        } else {
          headerEl.classList.remove('header-hidden');
        }
        lastY = y;
        ticking = false;
      };
      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(handleScroll);
          ticking = true;
        }
      }, { passive: true });
    }
    
    // Sticky Header Blur Effect on Scroll
    const header = document.getElementById('main-header');
    if (header) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
          header.classList.add('scrolled');
        } else {
          header.classList.remove('scrolled');
        }
      });
    }
    
    console.log('[Header] ‚úì Header initialized successfully');

    // First-visit language selection dialog
    try {
      const preferred = localStorage.getItem('preferredLocale');
      const showLangDialog = () => {
        if (!langOverlay) return;
        langOverlay.classList.remove('opacity-0', 'pointer-events-none');
        langOverlay.classList.add('opacity-100', 'pointer-events-auto');
        document.body.style.overflow = 'hidden';
      };
      const hideLangDialog = () => {
        if (!langOverlay) return;
        langOverlay.classList.remove('opacity-100', 'pointer-events-auto');
        langOverlay.classList.add('opacity-0', 'pointer-events-none');
        document.body.style.overflow = '';
      };
      const redirectToLocale = (target) => {
        const path = window.location.pathname;
        const isHi = path.startsWith('/hi');
        if (target === 'hi' && !isHi) {
          const base = path === '/' ? '' : path;
          window.location.assign(`/hi${base}`);
          return;
        }
        if (target === 'en' && isHi) {
          const base = path.replace(/^\/hi/, '') || '/';
          window.location.assign(base);
          return;
        }
        hideLangDialog();
      };
      if (!preferred && langOverlay && langEn && langHi) {
        setTimeout(showLangDialog, 600);
        langEn.addEventListener('click', (e) => {
          e.preventDefault();
          localStorage.setItem('preferredLocale', 'en');
          redirectToLocale('en');
        });
        langHi.addEventListener('click', (e) => {
          e.preventDefault();
          localStorage.setItem('preferredLocale', 'hi');
          redirectToLocale('hi');
        });
        if (langClose) {
          langClose.addEventListener('click', (e) => {
            e.preventDefault();
            // Persist current locale to avoid asking again immediately
            const isHi = (window.location.pathname || '').startsWith('/hi');
            localStorage.setItem('preferredLocale', isHi ? 'hi' : 'en');
            hideLangDialog();
          });
        }
      }
    } catch (err) {
      console.warn('[Header] Language dialog init error', err);
    }
  });
</script>

